# Inspired by:
# https://github.com/kelgon/redisHA/blob/master/haproxy.cfg
#
# Any changes to this file should be reflected in ha-proxy.tpl as well.
#
defaults
mode                      tcp
log                    global
maxconn                 30000
timeout connect           10s
timeout server              0
timeout client              0
timeout queue             60s
option                 tcplog
option                logasap
option      log-health-checks

resolvers kubedns
nameserver namesrv1 kube-dns.kube-system.svc.cluster.local:53
resolve_retries             3
timeout retry              1s
hold other                 1s
hold refused               1s
hold nx                    1s
hold timeout               1s
hold valid                 1s

listen health_check_http_url
bind                    :8888
mode                     http
monitor-uri          /healthz
option            dontlognull

listen stats
bind                  *:8404
mode                    http
stats                 enable
stats  uri            /stats
stats  refresh            5s
stats  admin if         TRUE
option httpchk   GET /status

# decide redis backend to use
frontend ft_redis_master
bind *:6379
{% for srv in redis_instances.resources %}
use_backend {{ srv.metadata.name }} if { srv_is_up({{ srv.metadata.name }}/redis) } { nbsrv(sentinel_is_redis_master_{{ srv.metadata.name }}) ge {{ ((redis_instances.resources | length) /2 + 0.1) | round(0, 'ceil') }} }
{% endfor %}
default_backend redis-legacy


{% for srv in redis_instances.resources %}

# Setup redis backend and availability check
backend {{ srv.metadata.name }}
mode tcp
balance first
option tcp-check
option tcp-smart-connect
retry-on all-retryable-errors

tcp-check connect port 6379
tcp-check comment AUTH\ phase
tcp-check send AUTH\ {{ redis_password | default('') }}\r\n
tcp-check expect string +OK
tcp-check comment PING\ phase
tcp-check send PING\r\n
tcp-check expect string +PONG
tcp-check comment INFO\ REPLICATION\ phase
tcp-check send INFO\ REPLICATION\r\n
tcp-check expect rstring .*role:\s*master.*
tcp-check comment QUIT\ phase
tcp-check send QUIT\r\n
tcp-check expect string +OK

server redis {{ srv.status.podIP }}:6379 maxconn 5000 check port 26379 inter 2s

# Check if sentinel {{ loop.index }} is responding and who he thinks the master is
backend sentinel_is_redis_master_{{ srv.metadata.name }}
mode tcp
option tcp-check
option tcp-smart-connect
retry-on all-retryable-errors

tcp-check connect port 26379
tcp-check comment AUTH\ phase
tcp-check send AUTH\ {{ redis_password | default('') }}\r\n
tcp-check expect string +OK
tcp-check comment PING\ phase
tcp-check send PING\r\n
tcp-check expect string +PONG
tcp-check comment SENTINEL\ phase
tcp-check send SENTINEL\ get-master-addr-by-name\ mymaster\r\n
tcp-check expect string {{ srv.status.podIP }}
tcp-check comment QUIT\ phase
tcp-check send QUIT\r\n
tcp-check expect string +OK

server sentinel-{{ srv.metadata.name }} {{ srv.status.podIP }}:26379 check port 26379 inter 30s

{% endfor %}

#The legacy HA mode
backend redis-legacy
mode tcp
balance first
option tcp-check
option tcp-smart-connect
retry-on all-retryable-errors

tcp-check comment AUTH\ phase
tcp-check send AUTH\ {{ redis_password | default('') }}\r\n
tcp-check expect string +OK
tcp-check comment PING\ phase
tcp-check send PING\r\n
tcp-check expect string +PONG
tcp-check comment INFO\ REPLICATION\ phase
tcp-check send INFO\ REPLICATION\r\n
tcp-check expect string role:master
tcp-check comment QUIT\ phase
tcp-check send QUIT\r\n
tcp-check expect string +OK

default-server check resolvers kubedns inter 1s downinter 1s fastinter 1s fall 1 rise 30 maxconn 330 no-agent-check on-error mark-down

{% for srv in redis_instances.resources %}
# ping redis-stage-node-0.redis-stage-headless
server redis-{{ srv.metadata.name }} {{ srv.status.podIP }}:6379 check port 6379 maxconn 5000 inter 5s fall 1 rise 1
{% endfor %}
